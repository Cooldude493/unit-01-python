"""
Task 1: People Class
Define a class called Person with attributes name and age.
Then, write a method within the class to introduce the person with their name and age.

Create a new object using this new class, and call the method you created.
"""
print("--------Task 1--------")
print()
print()
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age # Attribute to store the age and name of the person

    def introduce(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.") # A functoion that introduces the person with their name and age
    
person1 = Person("Caleb", 543)

person = person1.introduce()

print()
print()
print("--------Task 1--------")
print()


"""
Task 2: Animals Speak
Create a base class Animal with a empty method called speak. 

Then create two subclasses, Dog and Cat, each with their own speak method. 

Create objects using these subclasses and call the speak method.
"""
print("--------Task 2--------")
print()
print()

class Animal:
    def speak(self):
        pass # An empty method called speak in the base class Animal

class Dog(Animal):
    def speak(self):
        print("Woof!")

class Cat(Animal):
    def speak(self):
        print("Meow!") #Subclasses Dog and Cat with their own speak methods
    
dog = Dog()
cat = Cat()

dog.speak()
print()
cat.speak()

print()
print()
print("--------Task 2--------")
print()


"""
Task 3: Banking
Create a class BankAccount with attributes balance and owner. 

Include methods for depositing and withdrawing money, which should modify the balance attribute.

Test these methods with instances of the class.
"""
print("--------Task 3--------")
print()
print()

class Bank:
    def __init__(self):
        self.balance = 0
        self.owner = "" # Attributes balance and owner
    
    def deposit(self, amount):
        self.balance += amount
        print(f"{self.owner} Deposited: ${amount}. New balance: ${self.balance}") # Method to deposit money by adding to balance
    
    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds")
        else:
            self.balance -= amount
            print(f"{self.owner} Withdrew: ${amount}. New balance: ${self.balance}") # Method to withdraw money by subtracting from balance

account = Bank()

account.owner = "Caleb"

account.deposit(2300)

account.withdraw(250)

account.withdraw(3000)

print()
print()
print("--------Task 3--------")